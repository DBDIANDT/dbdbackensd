"""
Django settings for translation_platform project.

Generated by 'django-admin startproject' using Django 5.1.4.
"""
import base64
import tempfile

from django.core.exceptions import ImproperlyConfigured

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta
import dj_database_url

from django.utils.translation import gettext_lazy as _
from django.core.management.utils import get_random_secret_key





# Charger les variables d'environnement
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
SECRET_KEY = os.getenv('SECRET_KEY')
ENCRYPTION_KEY=os.getenv('ENCRYPTION_KEY')
DEBUG = os.getenv('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',') if os.getenv('ALLOWED_HOSTS') else []

# Configuration pour l'authentification par clé API
API_KEY_HEADER = os.environ.get('API_KEY_HEADER', 'X-API-Key')
API_KEY_QUERY_PARAM = os.environ.get('API_KEY_QUERY_PARAM', 'api_key')
API_KEY_AUTH_HEADER_PREFIX = os.environ.get('API_KEY_AUTH_HEADER_PREFIX', 'Api-Key')

# URLs exemptées d'authentification par clé API
API_KEY_EXEMPT_URLS = os.environ.get('API_KEY_EXEMPT_URLS', '/admin/,/api/docs/,/api/auth/,^/api/public/')
if isinstance(API_KEY_EXEMPT_URLS, str):
    API_KEY_EXEMPT_URLS = [url.strip() for url in API_KEY_EXEMPT_URLS.split(',') if url.strip()]

# Mode strict
API_KEY_STRICT_MODE = os.environ.get('API_KEY_STRICT_MODE', 'False').lower() in ('true', '1', 't')


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
    },
}

# Application definition
INSTALLED_APPS = [
    # Local apps (mettre en premier)
    "app",
    'storages',
    # Django built-in apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'widget_tweaks',
    # Third party apps
    'phonenumber_field',
    'django_countries',
    'django_apscheduler',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'crispy_tailwind',
    'django_celery_beat',
    'social_django',
    'crispy_forms',
    'crispy_bootstrap5',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",  # Internationalisation middleware
    "whitenoise.middleware.WhiteNoiseMiddleware", 
    "app.api_auth.middleware.APIKeyMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / 'templates',
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                'app.context_processors.site_context',
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
DATABASES = {
    'default': dj_database_url.config(
        default=os.getenv('MYSQL_URL'),
        conn_max_age=600
    )
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization settings
LANGUAGE_CODE = "en-us"
TIME_ZONE = "America/New_York"  # Fuseau horaire pour le Massachusetts

# Available languages
LANGUAGES = [
    ('en', _('English')),
]

# Directory where translation files are stored
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

USE_I18N = True  # Enable internationalization
USE_L10N = True  # Enable localization
USE_TZ = True  # Enable timezone support

# Date and Time Formatting
DATE_FORMAT = 'N j, Y'  # Example: Jan. 1, 2024
DATETIME_FORMAT = 'N j, Y, P'  # Example: Jan. 1, 2024, 4 p.m.
SHORT_DATE_FORMAT = 'm/d/Y'  # US format: MM/DD/YYYY
SHORT_DATETIME_FORMAT = 'm/d/Y P'

# Number Formatting
USE_THOUSAND_SEPARATOR = True
THOUSAND_SEPARATOR = ','
NUMBER_GROUPING = 3
DECIMAL_SEPARATOR = '.'

# Date Input Formats
DATE_INPUT_FORMATS = [
    '%m/%d/%Y',  # US format MM/DD/YYYY
    '%Y-%m-%d',  # ISO format
]

# Time Input Formats
TIME_INPUT_FORMATS = [
    '%I:%M %p',  # 12-hour format with AM/PM
    '%H:%M',     # 24-hour format
]

# Static files (CSS, JavaScript, Images)
STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        #"app.api_auth.authentication.APIKeyAuthentication",
    ),
    'DATETIME_FORMAT': '%Y-%m-%dT%H:%M:%S%z',
    'DATE_FORMAT': '%Y-%m-%d',
    'TIME_FORMAT': '%H:%M:%S',
    'DATETIME_INPUT_FORMATS': [
        '%Y-%m-%dT%H:%M:%S%z',
        '%Y-%m-%d %H:%M:%S',
        '%Y-%m-%d %H:%M',
    ],
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=int(os.getenv('JWT_ACCESS_TOKEN_LIFETIME', 3600))),
    'REFRESH_TOKEN_LIFETIME': timedelta(seconds=int(os.getenv('JWT_REFRESH_TOKEN_LIFETIME', 86400))),
    'SIGNING_KEY': os.getenv('JWT_SECRET_KEY', SECRET_KEY),
}

# CORS Settings
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', '').split(',') if os.getenv('CORS_ALLOWED_ORIGINS') else []
CORS_ALLOW_CREDENTIALS = os.getenv('CORS_ALLOW_CREDENTIALS', 'True') == 'True'
CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', '').split(',') if os.getenv('CSRF_TRUSTED_ORIGINS') else []

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Configuration email directe

EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False') == 'True'
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

QUOTE_NOTIFICATION_EMAIL = os.getenv('QUOTE_NOTIFICATION_EMAIL ')
# Celery Configuration
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Social Auth Configuration
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY =('SOCIAL_AUTH_GOOGLE_CLIENT_ID')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_GOOGLE_CLIENT_SECRET')

# Stripe Configuration
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY')

# Login/Logout URLs
LOGIN_URL = 'dbdint:login'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_URL = 'logout'
LOGOUT_REDIRECT_URL = 'home'

# Phone number settings
PHONENUMBER_DEFAULT_REGION = 'US'
PHONENUMBER_DB_FORMAT = 'INTERNATIONAL'

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = ('bootstrap5',)
CRISPY_TEMPLATE_PACK = 'bootstrap5'

# Scheduler Configuration
SCHEDULER_CONFIG = {
    "apscheduler.jobstores.default": {
        "class": "django_apscheduler.jobstores:DjangoJobStore",
    },
    "apscheduler.executors.default": {
        "class": "apscheduler.executors.pool:ThreadPoolExecutor",
        "max_workers": 20,
    },
    "apscheduler.job_defaults": {
        "coalesce": False,
        "max_instances": 1,
    },
    "apscheduler.timezone": TIME_ZONE,
}

# Scheduler Config Variables
SCHEDULER_AUTOSTART = True
SCHEDULER_REMOVE_EXISTING_JOBS = True
AUTH_USER_MODEL = 'app.User'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Storage Configuration


# Limites de taille pour les uploads
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB pour la mémoire par défaut
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB pour les requêtes POST
VIDEO_MAX_SIZE = 50 * 1024 * 1024  # 50MB pour les vidéos
IMAGE_MAX_SIZE = 5 * 1024 * 1024   # 5MB pour les images



# Configuration Backblaze B2 depuis les variables d'environnement
AWS_ACCESS_KEY_ID = os.getenv('B2_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('B2_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('B2_BUCKET_NAME')
AWS_S3_ENDPOINT_URL = os.getenv('B2_ENDPOINT_URL')  # Gardé pour compatibilité
AWS_S3_REGION_NAME = os.getenv('B2_REGION_NAME')

# Configuration S3/B2
AWS_DEFAULT_ACL = None
AWS_BUCKET_ACL = None
AWS_QUERYSTRING_AUTH = False  # False pour URLs publiques, True pour URLs présignées
AWS_S3_FILE_OVERWRITE = False
AWS_LOCATION = 'media'
AWS_S3_SIGNATURE_VERSION = 's3v4'  # Gardé pour compatibilité

# Configuration URL publique
# Note: Le custom domain n'est utilisé que si AWS_QUERYSTRING_AUTH = False
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.backblazeb2.com'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'

# Configuration moderne des storages
# Utilise maintenant le storage B2 natif qui évite les problèmes de compatibilité
STORAGES = {
    "default": {
        "BACKEND": "custom_storages.MediaStorage",  # Pointe vers le nouveau storage B2 natif
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    }
}

MASTER_KEY = os.environ.get('MASTER_KEY', '')
PDF_GENERATOR_API_KEY = os.getenv('PDF_GENERATOR_API_KEY')
API_URL_PDF_GENERATOR=os.getenv('API_URL_PDF_GENERATOR')


DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@{{ COMPANY_NAME }}translation.com')

# ===== CONFIGURATION ENTREPRISE =====
COMPANY_NAME = os.getenv('COMPANY_NAME', '{{ COMPANY_NAME }}')
COMPANY_FULL_NAME = os.getenv('COMPANY_FULL_NAME', '{{ COMPANY_NAME }} Translation')
COMPANY_DOMAIN = os.getenv('COMPANY_DOMAIN', '{{ COMPANY_NAME }}translation.com')

# ===== CONFIGURATION EMAIL =====
# Adresses email
CONTRACTS_EMAIL = f"contracts@{COMPANY_DOMAIN}"
SUPPORT_EMAIL = f"support@{COMPANY_DOMAIN}"
UNSUBSCRIBE_EMAIL = f"unsubscribe@{COMPANY_DOMAIN}"

# Format des expéditeurs
CONTRACTS_FROM_EMAIL = f"{COMPANY_NAME} Contracts <{CONTRACTS_EMAIL}>"
COMPANY_FROM_EMAIL = f"{COMPANY_NAME} <{DEFAULT_FROM_EMAIL}>"

# ===== SUJETS D'EMAIL GÉNÉRAUX =====
EMAIL_SUBJECTS = {
    'CONTRACT_SIGNATURE': f"Your {COMPANY_NAME} Interpreter Agreement - Signature Required",
    'QUOTE_CONFIRMATION': f"Quote Request Received - {COMPANY_NAME}",
    'CONTACT_CONFIRMATION': f"Thank you for contacting {COMPANY_NAME}",
    'QUOTE_NOTIFICATION': "New Quote Request: {company_name}",
    'CONTACT_NOTIFICATION': "New Contact Form Submission: {subject}",
}

# ===== SUJETS D'EMAIL POUR ASSIGNMENTS =====
ASSIGNMENT_EMAIL_SUBJECTS = {
    'CONFIRMATION': 'Assignment Confirmation #{assignment_id} - Calendar Invitation [{unique_id}]',
    'DECLINE_CONFIRMATION': 'Assignment Declined - Confirmation #{assignment_id} [{unique_id}]',
    'ADMIN_NOTIFICATION': 'Assignment #{assignment_id} {action} by {interpreter_name} [{unique_id}]',
}

# ===== MESSAGES UTILISATEUR GÉNÉRAUX =====
MESSAGES = {
    'REGISTRATION_SUCCESS': f"Registration completed successfully! Welcome to {COMPANY_NAME}.",
    'ACCOUNT_CREATED': f"Your interpreter account has been created successfully! Please check your email to sign the agreement contract.",
    'QUOTE_SUCCESS': "Your quote request has been submitted successfully! We will contact you shortly with more information.",
    'CONTACT_SUCCESS': "Your message has been sent successfully! We will contact you shortly.",
    'NOTIFICATION_UPDATED': "Your notification preferences have been updated!",
    'STEP1_SUCCESS': "Personal information saved successfully. Please complete your company details.",
}

# ===== MESSAGES D'INTERFACE POUR ASSIGNMENTS =====
ASSIGNMENT_MESSAGES = {
    'LINK_EXPIRED': os.getenv('ASSIGNMENT_MSG_LINK_EXPIRED', 'Link Expired'),
    'LINK_EXPIRED_MESSAGE': 'This link has expired or is no longer valid.',
    'ALREADY_PROCESSED': os.getenv('ASSIGNMENT_MSG_ALREADY_PROCESSED', 'Already Processed'),
    'ALREADY_PROCESSED_MESSAGE': 'This assignment has already been processed.',
    'ASSIGNMENT_ACCEPTED': os.getenv('ASSIGNMENT_MSG_ACCEPTED', 'Assignment Accepted'),
    'ASSIGNMENT_DECLINED': os.getenv('ASSIGNMENT_MSG_DECLINED', 'Assignment Declined'),
    'ASSIGNMENT_NOT_FOUND': 'Assignment Not Found',
    'ASSIGNMENT_NOT_FOUND_MESSAGE': 'The requested assignment could not be found.',
}

# ===== TEMPLATES D'EMAIL GÉNÉRAUX =====
EMAIL_TEMPLATES = {
    'CONTACT_CONFIRMATION': f"""Dear {{name}},

Thank you for contacting {COMPANY_NAME}. We have received your message and will get back to you shortly.

Your message details:
Subject: {{subject}}
Reference Number: #{{id}}

Best regards,
{COMPANY_NAME} Team""",
    
    'CONTACT_NOTIFICATION': f"""New contact form submission received:

From: {{name}} <{{email}}>
Subject: {{subject}}

Message:
{{message}}

View in admin panel: {{admin_url}}""",
}

# ===== TEMPLATES D'EMAIL POUR ASSIGNMENTS =====
ASSIGNMENT_EMAIL_TEMPLATES = {
    'INTERPRETER_CONFIRMATION': os.getenv('ASSIGNMENT_TEMPLATE_INTERPRETER_CONFIRMATION', 'notifmail/interpreter_assignment_confirmation.html'),
    'INTERPRETER_DECLINE': os.getenv('ASSIGNMENT_TEMPLATE_INTERPRETER_DECLINE', 'notifmail/interprter_assignment_decline_confirmation.html'),
    'ADMIN_NOTIFICATION': os.getenv('ASSIGNMENT_TEMPLATE_ADMIN_NOTIFICATION', 'notifmail/admin_assignment_response.html'),
}

# ===== TEMPLATES DE PAGES POUR ASSIGNMENTS =====
ASSIGNMENT_PAGE_TEMPLATES = {
    'TOKEN_EXPIRED': os.getenv('ASSIGNMENT_TEMPLATE_TOKEN_EXPIRED', 'pages/token_expired.html'),
    'ALREADY_PROCESSED': os.getenv('ASSIGNMENT_TEMPLATE_ALREADY_PROCESSED', 'pages/already_processed.html'),
    'ACCEPT_SUCCESS': os.getenv('ASSIGNMENT_TEMPLATE_ACCEPT_SUCCESS', 'pages/accept_success.html'),
    'DECLINE_SUCCESS': os.getenv('ASSIGNMENT_TEMPLATE_DECLINE_SUCCESS', 'pages/decline_success.html'),
    'NOT_FOUND': os.getenv('ASSIGNMENT_TEMPLATE_NOT_FOUND', 'pages/not_found.html'),
}

# ===== CONFIGURATION ASSIGNMENTS =====


# ===== CONFIGURATION CALENDRIER iCAL =====
ICAL_CONFIG = {
    'PRODID': f'-//{COMPANY_NAME} Assignment System//EN',
    'VERSION': os.getenv('ICAL_VERSION', '2.0'),
    'METHOD': os.getenv('ICAL_METHOD', 'REQUEST'),
    'ORGANIZER_NAME': f'{COMPANY_NAME} System',
    'SUMMARY_TEMPLATE': 'Interpretation Assignment - {service_type}',
    'UID_TEMPLATE': 'assignment-{assignment_id}@{domain}',
    'FILENAME': os.getenv('ICAL_FILENAME', 'invite.ics'),
}

# ===== DESCRIPTION TEMPLATE POUR CALENDRIER =====
ASSIGNMENT_CALENDAR_DESCRIPTION = """Client: {client_name}
Service: {service_type}
Languages: {source_language} → {target_language}
Location: {location}, {city}, {state} {zip_code}

Special Requirements: {special_requirements}

Rate: ${rate}/hour
"""

# ===== EN-TÊTES EMAIL ANTI-THREADING =====
ASSIGNMENT_EMAIL_HEADERS = {
    'X_NO_THREADING': 'true',
    'CONTENT_CLASS': 'urn:content-classes:calendarmessage',
    'THREAD_TOPIC_PREFIX': 'Assignment {assignment_id}',
    'ENTITY_REF_PREFIX': 'assignment-{assignment_id}',
}

# ===== ACTIONS D'AUDIT POUR ASSIGNMENTS =====
ASSIGNMENT_AUDIT_ACTIONS = {
    'ACCEPTED': 'ASSIGNMENT_ACCEPTED',
    'DECLINED': 'ASSIGNMENT_DECLINED',
}

# ===== CONFIGURATION MAILER =====
MAILER_CONFIG = {
    'NAME': f"{COMPANY_NAME}-ContractMailer/1.0",
    'FEEDBACK_ID_PREFIX': f"{COMPANY_DOMAIN.split('.')[0]}",
}

# ===== CONFIGURATION UNSUBSCRIBE =====
UNSUBSCRIBE_CONFIG = {
    'EMAIL_TEMPLATE': "Unsubscribe-{email}",
    'SUBJECT_TEMPLATE': "Unsubscribe-{email}",
    'URL_TEMPLATE': f"mailto:{UNSUBSCRIBE_EMAIL}?subject=Unsubscribe-{{email}}",
}

# ===== TIMEZONE =====
COMPANY_TIMEZONE = os.getenv('COMPANY_TIMEZONE', 'America/New_York')

# ===== REDIRECTIONS =====
DASHBOARD_URLS = {
    'CLIENT': 'dbdint:client_dashboard',
    'INTERPRETER': 'dbdint:new_interpreter_dashboard',
}

# ===== ÉTATS US =====
US_STATES = {
    'AL': 'Alabama', 'AK': 'Alaska', 'AZ': 'Arizona', 'AR': 'Arkansas',
    'CA': 'California', 'CO': 'Colorado', 'CT': 'Connecticut', 'DE': 'Delaware',
    'FL': 'Florida', 'GA': 'Georgia', 'HI': 'Hawaii', 'ID': 'Idaho',
    'IL': 'Illinois', 'IN': 'Indiana', 'IA': 'Iowa', 'KS': 'Kansas',
    'KY': 'Kentucky', 'LA': 'Louisiana', 'ME': 'Maine', 'MD': 'Maryland',
    'MA': 'Massachusetts', 'MI': 'Michigan', 'MN': 'Minnesota', 'MS': 'Mississippi',
    'MO': 'Missouri', 'MT': 'Montana', 'NE': 'Nebraska', 'NV': 'Nevada',
    'NH': 'New Hampshire', 'NJ': 'New Jersey', 'NM': 'New Mexico', 'NY': 'New York',
    'NC': 'North Carolina', 'ND': 'North Dakota', 'OH': 'Ohio', 'OK': 'Oklahoma',
    'OR': 'Oregon', 'PA': 'Pennsylvania', 'RI': 'Rhode Island', 'SC': 'South Carolina',
    'SD': 'South Dakota', 'TN': 'Tennessee', 'TX': 'Texas', 'UT': 'Utah',
    'VT': 'Vermont', 'VA': 'Virginia', 'WA': 'Washington', 'WV': 'West Virginia',
    'WI': 'Wisconsin', 'WY': 'Wyoming', 'DC': 'District of Columbia'
}

# ===== MESSAGES CLIENT DASHBOARD =====
CLIENT_MESSAGES = {
    # Messages d'accès et permissions
    'ACCESS_DENIED_CLIENT_ONLY': os.getenv('CLIENT_MSG_ACCESS_DENIED', "Access denied. This area is for clients only."),
    'ACCOUNT_SETUP_INCOMPLETE': os.getenv('CLIENT_MSG_SETUP_INCOMPLETE', "Your account setup is incomplete. Please contact support."),
    'INTERPRETER_REDIRECT_WARNING': os.getenv('CLIENT_MSG_INTERPRETER_REDIRECT', "This area is for clients only. Redirecting to interpreter dashboard."),
    'ACCESS_DENIED_COMPLETE_REGISTRATION': os.getenv('CLIENT_MSG_COMPLETE_REGISTRATION', "Access denied. Please complete your registration or contact support."),
    
    # Messages de données et chargement
    'DASHBOARD_DATA_ERROR': os.getenv('CLIENT_MSG_DASHBOARD_ERROR', "There was a problem loading your dashboard data. Please refresh the page or contact support if the problem persists."),
    
    # Messages de quotes
    'QUOTE_REQUEST_SUCCESS': os.getenv('CLIENT_MSG_QUOTE_SUCCESS', "Your quote request has been successfully submitted. Our team will review it shortly."),
    'QUOTE_ACCEPTED_SUCCESS': os.getenv('CLIENT_MSG_QUOTE_ACCEPTED', "Quote accepted successfully. Our team will assign an interpreter shortly."),
    'QUOTE_REJECTED_SUCCESS': os.getenv('CLIENT_MSG_QUOTE_REJECTED', "Quote rejected successfully."),
    'QUOTE_ACCEPT_ERROR': os.getenv('CLIENT_MSG_QUOTE_ACCEPT_ERROR', "An error occurred while accepting the quote."),
    'QUOTE_REJECT_ERROR': os.getenv('CLIENT_MSG_QUOTE_REJECT_ERROR', "An error occurred while rejecting the quote."),
    
    # Messages d'assignments et feedback
    'FEEDBACK_COMPLETED_ONLY': os.getenv('CLIENT_MSG_FEEDBACK_COMPLETED', "Feedback can only be submitted for completed assignments."),
    'FEEDBACK_ALREADY_SUBMITTED': os.getenv('CLIENT_MSG_FEEDBACK_ALREADY', "Feedback has already been submitted for this assignment."),
    'FEEDBACK_THANK_YOU': os.getenv('CLIENT_MSG_FEEDBACK_THANKS', "Thank you for your feedback!"),
    
    # Messages de profil
    'PROFILE_UPDATED_SUCCESS': os.getenv('CLIENT_MSG_PROFILE_UPDATED', "Your profile has been updated successfully."),
    'PASSWORD_CHANGED_SUCCESS': os.getenv('CLIENT_MSG_PASSWORD_CHANGED', "Your password has been changed successfully."),
    
    # Messages de notifications
    'NOTIFICATION_ID_REQUIRED': os.getenv('CLIENT_MSG_NOTIF_ID_REQUIRED', 'Notification ID is required'),
    'NOTIFICATION_MARKED_READ': os.getenv('CLIENT_MSG_NOTIF_MARKED_READ', 'Notification marked as read'),
    'NOTIFICATION_NOT_FOUND': os.getenv('CLIENT_MSG_NOTIF_NOT_FOUND', 'Notification not found'),
    'NOTIFICATIONS_CLEARED': os.getenv('CLIENT_MSG_NOTIFS_CLEARED', '{count} notifications marked as read'),
    'METHOD_NOT_ALLOWED': os.getenv('CLIENT_MSG_METHOD_NOT_ALLOWED', 'Method not allowed'),
    'ERROR_OCCURRED': os.getenv('CLIENT_MSG_ERROR_OCCURRED', 'An error occurred'),
}

# ===== TEMPLATES CLIENT =====
CLIENT_TEMPLATES = {
    'DASHBOARD': os.getenv('CLIENT_TEMPLATE_DASHBOARD', 'client/home.html'),
    'QUOTE_LIST': os.getenv('CLIENT_TEMPLATE_QUOTE_LIST', 'client/quote_list.html'),
    'QUOTE_CREATE': os.getenv('CLIENT_TEMPLATE_QUOTE_CREATE', 'client/quote_create.html'),
    'QUOTE_DETAIL': os.getenv('CLIENT_TEMPLATE_QUOTE_DETAIL', 'client/quote_detail.html'),
    'ASSIGNMENT_DETAIL': os.getenv('CLIENT_TEMPLATE_ASSIGNMENT_DETAIL', 'client/assignment_detail.html'),
    'PROFILE': os.getenv('CLIENT_TEMPLATE_PROFILE', 'client/profile.html'),
    'PROFILE_UPDATE': os.getenv('CLIENT_TEMPLATE_PROFILE_UPDATE', 'accounts/profile/update.html'),
    'PASSWORD_CHANGE': os.getenv('CLIENT_TEMPLATE_PASSWORD_CHANGE', 'client/change_password.html'),
}

# ===== URLS CLIENT =====
CLIENT_URLS = {
    'LOGIN': os.getenv('CLIENT_URL_LOGIN', 'dbdint:login'),
    'HOME': os.getenv('CLIENT_URL_HOME', 'dbdint:home'),
    'CLIENT_REGISTER': os.getenv('CLIENT_URL_REGISTER', 'dbdint:client_register'),
    'CLIENT_REGISTER_STEP2': os.getenv('CLIENT_URL_REGISTER_STEP2', 'dbdint:client_register_step2'),
    'CLIENT_DASHBOARD': os.getenv('CLIENT_URL_DASHBOARD', 'dbdint:client_dashboard'),
    'CLIENT_QUOTE_LIST': os.getenv('CLIENT_URL_QUOTE_LIST', 'dbdint:client_quote_list'),
    'CLIENT_QUOTE_DETAIL': os.getenv('CLIENT_URL_QUOTE_DETAIL', 'dbdint:client_quote_detail'),
    'CLIENT_ASSIGNMENT_DETAIL': os.getenv('CLIENT_URL_ASSIGNMENT_DETAIL', 'dbdint:client_assignment_detail'),
    'CLIENT_PROFILE_EDIT': os.getenv('CLIENT_URL_PROFILE_EDIT', 'dbdint:client_profile_edit'),
    'INTERPRETER_DASHBOARD': os.getenv('CLIENT_URL_INTERPRETER_DASHBOARD', 'dbdint:new_interpreter_dashboard'),
    'ADMIN_DASHBOARD': os.getenv('CLIENT_URL_ADMIN_DASHBOARD', 'dbdint:admin_dashboard'),
    'PROFILE': os.getenv('CLIENT_URL_PROFILE', 'profile'),
}

# ===== CONFIGURATION CLIENT =====
CLIENT_CONFIG = {
    'PAGINATION_SIZE': int(os.getenv('CLIENT_PAGINATION_SIZE', 10)),
    'STATS_DAYS_RANGE': int(os.getenv('CLIENT_STATS_DAYS_RANGE', 30)),
    'RECENT_ITEMS_LIMIT': int(os.getenv('CLIENT_RECENT_ITEMS_LIMIT', 5)),
}

# ===== TIMELINE EVENTS =====
TIMELINE_EVENTS = {
    'CREATED': os.getenv('TIMELINE_EVENT_CREATED', 'Quote request submitted'),
    'QUOTED': os.getenv('TIMELINE_EVENT_QUOTED', 'Quote generated and sent'),
    'ASSIGNED': os.getenv('TIMELINE_EVENT_ASSIGNED', 'Interpreter assigned'),
    'COMPLETED': os.getenv('TIMELINE_EVENT_COMPLETED', 'Service completed'),
}

# ===== LOGGING MESSAGES =====
CLIENT_LOG_MESSAGES = {
    'DASHBOARD_ACCESS_TEST': os.getenv('CLIENT_LOG_ACCESS_TEST', "Testing client dashboard access"),
    'NO_ROLE_ERROR': os.getenv('CLIENT_LOG_NO_ROLE', "User {user_id} has no role assigned"),
    'DASHBOARD_DATA_ERROR': os.getenv('CLIENT_LOG_DATA_ERROR', "Error loading client dashboard data"),
    'DASHBOARD_SUCCESS': os.getenv('CLIENT_LOG_SUCCESS', "Client dashboard accessed successfully"),
}

# ===== STATS KEYS =====
CLIENT_STATS_KEYS = {
    'PENDING_QUOTES': 'pending_quotes',
    'ACTIVE_ASSIGNMENTS': 'active_assignments',
    'COMPLETED_ASSIGNMENTS': 'completed_assignments',
    'TOTAL_SPENT': 'total_spent',
}

# ===== QUOTE FILTER STATS =====
QUOTE_FILTER_STATS = {
    'PENDING_COUNT': 'pending_count',
    'PROCESSING_COUNT': 'processing_count',
    'QUOTED_COUNT': 'quoted_count',
    'ACCEPTED_COUNT': 'accepted_count',
}

# ===== MESSAGES PAYROLL ET PDF =====
PAYROLL_MESSAGES = {
    # Messages d'erreur PDF
    'PDF_MISSING_IMAGE_DATA': os.getenv('PAYROLL_MSG_PDF_MISSING_IMAGE', 'Données d\'image manquantes'),
    'PDF_INVALID_JSON': os.getenv('PAYROLL_MSG_PDF_INVALID_JSON', 'Données JSON invalides'),
    'PDF_CREATION_ERROR': os.getenv('PAYROLL_MSG_PDF_CREATION_ERROR', 'Erreur lors de la génération du PDF'),
    'PDF_UNEXPECTED_ERROR': os.getenv('PAYROLL_MSG_PDF_UNEXPECTED_ERROR', 'Une erreur inattendue est survenue'),
    
    # Messages de succès
    'DOCUMENT_SAVED_SUCCESS': os.getenv('PAYROLL_MSG_DOC_SAVED', 'Document saved successfully'),
    'PDF_GENERATED_SUCCESS': os.getenv('PAYROLL_MSG_PDF_GENERATED', 'Your contract has been generated and sent to your email.'),
    'PDF_GENERATION_WARNING': os.getenv('PAYROLL_MSG_PDF_WARNING', 'There was an issue generating your contract. Our team has been notified.'),
}

# ===== MESSAGES CONTRATS =====
CONTRACT_MESSAGES = {
    # Messages de vérification
    'INVALID_VERIFICATION_LINK': os.getenv('CONTRACT_MSG_INVALID_LINK', 'Invalid verification link. No token was provided.'),
    'LINK_EXPIRED': os.getenv('CONTRACT_MSG_LINK_EXPIRED', 'This verification link has expired. Please contact support for assistance.'),
    'CONTRACT_ALREADY_PROCESSED': os.getenv('CONTRACT_MSG_ALREADY_PROCESSED', 'This contract has already been processed.'),
    'SYSTEM_ERROR': os.getenv('CONTRACT_MSG_SYSTEM_ERROR', 'An error occurred while processing your request. Please try again or contact support.'),
    
    # Messages OTP
    'OTP_MISSING_INFO': os.getenv('CONTRACT_MSG_OTP_MISSING', 'Missing information. Please try again.'),
    'OTP_MAX_ATTEMPTS': os.getenv('CONTRACT_MSG_OTP_MAX_ATTEMPTS', 'Too many failed attempts. Please request a new link.'),
    'OTP_INVALID_CODE': os.getenv('CONTRACT_MSG_OTP_INVALID', 'The verification code you entered is incorrect. Please try again.'),
    
    # Messages d'accès
    'UNAUTHORIZED_ACCESS': os.getenv('CONTRACT_MSG_UNAUTHORIZED', 'You must complete the verification process first.'),
    'VERIFICATION_TIMEOUT': os.getenv('CONTRACT_MSG_VERIFICATION_TIMEOUT', 'Your verification has expired. Please verify your identity again.'),
    'CONTRACT_EXPIRED': os.getenv('CONTRACT_MSG_CONTRACT_EXPIRED', 'This contract has expired. Please contact support for assistance.'),
    
    # Messages de formulaire
    'INCOMPLETE_FORM': os.getenv('CONTRACT_MSG_INCOMPLETE_FORM', 'Please complete all required fields and confirm the agreement.'),
    'MISSING_SIGNATURE': os.getenv('CONTRACT_MSG_MISSING_SIGNATURE', 'Please provide your signature.'),
    'INVALID_FILE': os.getenv('CONTRACT_MSG_INVALID_FILE', 'Please upload a valid image file.'),
    'FILE_TOO_LARGE': os.getenv('CONTRACT_MSG_FILE_TOO_LARGE', 'File size must be less than 2MB.'),
    
    # Messages de complétion
    'PREVIOUS_STEPS_REQUIRED': os.getenv('CONTRACT_MSG_PREVIOUS_STEPS', 'You must complete the previous steps first.'),
    'REQUIRED_FIELDS': os.getenv('CONTRACT_MSG_REQUIRED_FIELDS', 'Please fill in all required fields.'),
}

# ===== TEMPLATES PAYROLL =====
PAYROLL_TEMPLATES = {
    'FORM': os.getenv('PAYROLL_TEMPLATE_FORM', 'payroll_form.html'),
    'DETAIL': os.getenv('PAYROLL_TEMPLATE_DETAIL', 'payroll_template.html'),
    'PREVIEW': os.getenv('PAYROLL_TEMPLATE_PREVIEW', 'payroll_template.html'),
}

# ===== TEMPLATES CONTRATS =====
CONTRACT_TEMPLATES = {
    'OTP_SIGNUP': os.getenv('CONTRACT_TEMPLATE_OTP', 'signature_app/otp_signup.html'),
    'EXPIRED_LINKS': os.getenv('CONTRACT_TEMPLATE_EXPIRED', 'signature_app/expiredlinks.html'),
    'REVIEW_CONTRACT': os.getenv('CONTRACT_TEMPLATE_REVIEW', 'signature_app/reviewcontract.html'),
    'PAYMENT_INFO': os.getenv('CONTRACT_TEMPLATE_PAYMENT', 'signature_app/paymentinfo.html'),
    'SIGN_METHOD': os.getenv('CONTRACT_TEMPLATE_SIGN', 'signature_app/signmethode.html'),
    'CONFIRMATION': os.getenv('CONTRACT_TEMPLATE_CONFIRMATION', 'signature_app/confirmationsign.html'),
    'CONTRACT_TEMPLATE': os.getenv('CONTRACT_TEMPLATE_CONTRACT', 'contract/template_contract.html'),
    'EMAIL_CONFIRMATION': os.getenv('CONTRACT_EMAIL_TEMPLATE', 'notifmail/contract_agreement_good.html'),
}

# ===== CONFIGURATION PAYROLL =====
PAYROLL_CONFIG = {
    'PDF_FILENAME': os.getenv('PAYROLL_PDF_FILENAME', 'payment-statement.pdf'),
    'DOCUMENT_PREFIX': os.getenv('PAYROLL_DOC_PREFIX', 'JHB'),
    'PDF_MARGINS': {
        'RIGHT': int(os.getenv('PAYROLL_PDF_MARGIN_RIGHT', 72)),
        'LEFT': int(os.getenv('PAYROLL_PDF_MARGIN_LEFT', 72)),
        'TOP': int(os.getenv('PAYROLL_PDF_MARGIN_TOP', 72)),
        'BOTTOM': int(os.getenv('PAYROLL_PDF_MARGIN_BOTTOM', 72)),
    },
    'COMPANY_COLOR': os.getenv('PAYROLL_COMPANY_COLOR', '#003B71'),
    'MAX_FILE_SIZE': int(os.getenv('PAYROLL_MAX_FILE_SIZE', 2097152)),  # 2MB
}

# ===== CONFIGURATION CONTRATS =====
CONTRACT_CONFIG = {
    'OTP_MAX_ATTEMPTS': int(os.getenv('CONTRACT_OTP_MAX_ATTEMPTS', 3)),
    'SESSION_TIMEOUT': int(os.getenv('CONTRACT_SESSION_TIMEOUT', 900)),  # 15 minutes
    'VERIFICATION_TIMEOUT': int(os.getenv('CONTRACT_VERIFICATION_TIMEOUT', 18000)),  # 5 heures
    'AGREEMENT_PREFIX': os.getenv('CONTRACT_AGREEMENT_PREFIX', 'JHB-INT'),
    'PDF_API_TIMEOUT': int(os.getenv('CONTRACT_PDF_API_TIMEOUT', 310)),
    'PDF_DOWNLOAD_TIMEOUT': int(os.getenv('CONTRACT_PDF_DOWNLOAD_TIMEOUT', 60)),
    'PGP_KEY_EXPIRY_DAYS': int(os.getenv('CONTRACT_PGP_EXPIRY_DAYS', 1825)),  # 5 ans
}

# ===== INFORMATIONS ENTREPRISE POUR PAYROLL =====
PAYROLL_COMPANY_INFO = {
    'TITLE': os.getenv('PAYROLL_COMPANY_TITLE', '{{ COMPANY_FULL_NAME }}'),
    'SUBTITLE': os.getenv('PAYROLL_COMPANY_SUBTITLE', 'Payment Statement'),
    'ADDRESS': os.getenv('PAYROLL_COMPANY_ADDRESS', '{{ COMPANY_ADRESSE }}'),
    'PHONE': os.getenv('PAYROLL_COMPANY_PHONE', '+1 {{ COMPANY_NUM }}'),
    'EMAIL': os.getenv('PAYROLL_COMPANY_EMAIL', '{{ COMPANY_MAIL }}'),
    'COPYRIGHT': os.getenv('PAYROLL_COMPANY_COPYRIGHT', '© {year} {{ COMPANY_NAME }} Translation. All rights reserved.'),
}

# ===== TARIFS LANGUES =====
LANGUAGE_RATES = {
    'Portuguese': os.getenv('RATE_PORTUGUESE', '$35 per hour'),
    'Spanish': os.getenv('RATE_SPANISH', '$30 per hour'),
    'Haitian Creole': os.getenv('RATE_HAITIAN_CREOLE', '$30 per hour'),
    'Cape Verdean': os.getenv('RATE_CAPE_VERDEAN', '$30 per hour'),
    'French': os.getenv('RATE_FRENCH', '$35 per hour'),
    'Mandarin': os.getenv('RATE_MANDARIN', '$40 per hour'),
    'DEFAULT': os.getenv('RATE_DEFAULT', '$45 per hour'),
}

# ===== TYPES DE SIGNATURE =====
SIGNATURE_TYPES = {
    'DRAW': {
        'VALUE': 'draw',
        'DISPLAY': os.getenv('SIG_TYPE_DRAW_DISPLAY', 'Drawn Signature')
    },
    'TYPE': {
        'VALUE': 'type', 
        'DISPLAY': os.getenv('SIG_TYPE_TYPE_DISPLAY', 'Typed Signature')
    },
    'UPLOAD': {
        'VALUE': 'upload',
        'DISPLAY': os.getenv('SIG_TYPE_UPLOAD_DISPLAY', 'Uploaded Signature')
    },
    'DEFAULT': {
        'DISPLAY': os.getenv('SIG_TYPE_DEFAULT_DISPLAY', 'Electronic Signature')
    }
}

# ===== URLS CONTRATS =====
CONTRACT_URLS = {
    'VERIFICATION': os.getenv('CONTRACT_URL_VERIFICATION', 'dbdint:contract_verification'),
    'PAYMENT_INFO': os.getenv('CONTRACT_URL_PAYMENT', 'dbdint:contract_payment_info'),
    'SIGNATURE': os.getenv('CONTRACT_URL_SIGNATURE', 'dbdint:contract_signature'),
    'CONFIRMATION': os.getenv('CONTRACT_URL_CONFIRMATION', 'dbdint:confirmation'),
}

# ===== CONFIGURATION EMAIL CONTRATS =====
CONTRACT_EMAIL_CONFIG = {
    'SUBJECT_TEMPLATE': os.getenv('CONTRACT_EMAIL_SUBJECT', 'Your Contract Has Been Approved! - {company_name}'),
    'FROM_TEMPLATE': os.getenv('CONTRACT_EMAIL_FROM', '{company_name} Contracts <{contracts_email}>'),
    'REPLY_TO': os.getenv('CONTRACT_EMAIL_REPLY_TO', 'support@{{ COMPANY_NAME }}translation.com'),
    'MAILER_NAME': os.getenv('CONTRACT_EMAIL_MAILER', '{{ COMPANY_NAME }}-ContractMailer/1.0'),
    'UNSUBSCRIBE_TEMPLATE': os.getenv('CONTRACT_EMAIL_UNSUBSCRIBE', 'mailto:{unsubscribe_email}?subject=Unsubscribe-{email}'),
}

# ===== HEADERS EMAIL =====
CONTRACT_EMAIL_HEADERS = {
    'PRECEDENCE': 'bulk',
    'AUTO_SUBMITTED': 'auto-generated',
    'LIST_UNSUBSCRIBE_POST': 'List-Unsubscribe=One-Click',
}

# ===== CONFIGURATION API PDF =====
PDF_API_CONFIG = {
    'URL': os.getenv('PDF_API_URL', 'https://{{ COMPANY_NAME }}-esign-production.up.railway.app/api/generate-contract'),
    'API_KEY': os.getenv('PDF_GENERATOR_API_KEY', ''),
    'CONTENT_TYPE': 'application/json',
    'TIMEOUT': int(os.getenv('PDF_API_TIMEOUT', 310)),
}

# ===== MESSAGES DE LOG =====
LOG_MESSAGES = {
    # Logs contrats
    'CONTRACT_VERIFICATION_ATTEMPT': os.getenv('LOG_CONTRACT_VERIFICATION', 'Contract verification attempted with token: {token}'),
    'CONTRACT_NO_TOKEN': os.getenv('LOG_CONTRACT_NO_TOKEN', 'No token provided in the URL'),
    'CONTRACT_EXPIRED_ACCESS': os.getenv('LOG_CONTRACT_EXPIRED', 'Expired contract token accessed: {token}'),
    'CONTRACT_NON_PENDING': os.getenv('LOG_CONTRACT_NON_PENDING', 'Non-pending contract accessed: {token}, status: {status}'),
    'CONTRACT_VERIFICATION_SUCCESS': os.getenv('LOG_CONTRACT_SUCCESS', 'Contract verification successful, redirecting to OTP page. Agreement number: {agreement_number}'),
    
    # Logs OTP
    'OTP_VERIFICATION_ATTEMPT': os.getenv('LOG_OTP_ATTEMPT', 'OTP verification attempt received'),
    'OTP_MAX_ATTEMPTS_EXCEEDED': os.getenv('LOG_OTP_MAX_ATTEMPTS', 'Max OTP attempts exceeded for contract: {contract_id}'),
    'OTP_INVALID_CODE': os.getenv('LOG_OTP_INVALID', 'Invalid OTP code for contract ID: {contract_id}'),
    'OTP_SUCCESS': os.getenv('LOG_OTP_SUCCESS', 'OTP verification successful for contract ID: {contract_id}'),
    
    # Logs PDF
    'PDF_PROCESS_START': os.getenv('LOG_PDF_START', 'Starting PDF process for contract {contract_id}'),
    'PDF_PROCESS_SUCCESS': os.getenv('LOG_PDF_SUCCESS', 'PDF process completed successfully for contract {contract_id}'),
    'PDF_GENERATION_FAILED': os.getenv('LOG_PDF_FAILED', 'PDF generation failed for contract {contract_id} - {email}'),
    'PDF_API_CALL': os.getenv('LOG_PDF_API_CALL', 'Envoi de la requête POST à l\'API PDF : {url}'),
    'PDF_DOWNLOAD_SUCCESS': os.getenv('LOG_PDF_DOWNLOAD_SUCCESS', 'PDF downloaded successfully: {size} bytes'),
    
    # Logs email
    'EMAIL_SENT_SUCCESS': os.getenv('LOG_EMAIL_SUCCESS', 'Confirmation email sent to: {email} with Message-ID: {message_id}'),
}

# ===== CHEMINS DE FICHIERS =====
FILE_PATHS = {
    'CONTRACT_STORAGE': os.getenv('CONTRACT_STORAGE_PATH', 'contracts/'),
    'SIGNATURE_STORAGE': os.getenv('SIGNATURE_STORAGE_PATH', 'signatures/'),
    'PDF_TEMP_SUFFIX': os.getenv('PDF_TEMP_SUFFIX', '.pdf'),
    'IMAGE_TEMP_SUFFIX': os.getenv('IMAGE_TEMP_SUFFIX', '.png'),
}

# ===== FORMATS DE FICHIERS =====
FILE_FORMATS = {
    'PDF_FILENAME_TEMPLATE': os.getenv('PDF_FILENAME_TEMPLATE', 'statement_{document_number}.pdf'),
    'CONTRACT_FILENAME_TEMPLATE': os.getenv('CONTRACT_FILENAME_TEMPLATE', 'contract_{interpreter_name}.pdf'),
    'SIGNATURE_FILENAME_TEMPLATE': os.getenv('SIGNATURE_FILENAME_TEMPLATE', 'signature_{contract_id}_{timestamp}.{extension}'),
    'CONTRACT_STORAGE_TEMPLATE': os.getenv('CONTRACT_STORAGE_TEMPLATE', 'contracts/contract_{contract_id}_{timestamp}.pdf'),
}

# ===== STATUTS DOCUMENTS =====
DOCUMENT_STATUSES = {
    'DRAFT': 'DRAFT',
    'SIGNED': 'SIGNED',
    'COMPLETED': 'COMPLETED',
    'PENDING': 'PENDING',
    'LINK_ACCESSED': 'LINK_ACCESSED',
}

# ===== TYPES DE DOCUMENTS =====
DOCUMENT_TYPES = {
    'CONTRACT': 'CONTRACT',
    'PAYROLL': 'PAYROLL',
    'AGREEMENT': 'AGREEMENT',
}

# ===== TYPES DE COMPTES BANCAIRES =====
ACCOUNT_TYPES = {
    'CHECKING': 'checking',
    'SAVINGS': 'savings',
}

# ===== CONFIGURATION PDF PAYROLL =====
PDF_TABLE_CONFIG = {
    'HEADERS': ['Date', 'Client', 'Languages', 'Duration', 'Rate', 'Amount'],
    'HEADER_BG_COLOR': os.getenv('PDF_HEADER_BG_COLOR', '#003B71'),
    'HEADER_TEXT_COLOR': 'whitesmoke',
    'HEADER_FONT': 'Helvetica-Bold',
    'HEADER_FONT_SIZE': int(os.getenv('PDF_HEADER_FONT_SIZE', 12)),
    'BODY_FONT': 'Helvetica',
    'BODY_FONT_SIZE': int(os.getenv('PDF_BODY_FONT_SIZE', 10)),
    'ROW_COLORS': ['white', 'lightgrey'],
}

# ===== VALIDATION RULES =====
VALIDATION_RULES = {
    'REQUIRED_PAYMENT_FIELDS': ['payment_name', 'payment_phone', 'payment_address', 'payment_email', 
                               'bank_name', 'account_holder', 'account_number', 'routing_number', 'account_type'],
    'MAX_FILE_SIZE_MB': int(os.getenv('MAX_FILE_SIZE_MB', 2)),
    'ALLOWED_IMAGE_TYPES': ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'],
    'MIN_SIGNATURE_LENGTH': int(os.getenv('MIN_SIGNATURE_LENGTH', 2)),
}

# ===== MESSAGES D'ERREUR SPÉCIFIQUES =====
SPECIFIC_ERROR_MESSAGES = {
    'incomplete_form': os.getenv('ERROR_INCOMPLETE_FORM', 'Please complete all required fields and confirm the agreement.'),
    'missing_signature': os.getenv('ERROR_MISSING_SIGNATURE', 'Please provide your signature.'),
    'invalid_file': os.getenv('ERROR_INVALID_FILE', 'Please upload a valid image file.'),
    'file_too_large': os.getenv('ERROR_FILE_TOO_LARGE', 'File size must be less than 2MB.'),
    'system_error': os.getenv('ERROR_SYSTEM', 'System error'),
    'unauthorized_access': os.getenv('ERROR_UNAUTHORIZED', 'Unauthorized access'),
    'token_expired': os.getenv('ERROR_TOKEN_EXPIRED', 'Token expired'),
    'contract_expired': os.getenv('ERROR_CONTRACT_EXPIRED', 'Contract expired'),
    'missing_information': os.getenv('ERROR_MISSING_INFO', 'Missing information'),
    'too_many_attempts': os.getenv('ERROR_TOO_MANY_ATTEMPTS', 'Too many attempts'),
    'contract_already_processed': os.getenv('ERROR_ALREADY_PROCESSED', 'Contract already processed'),
}


LOGO_COMPANY = os.getenv('LOGO_COMPANY', default='')
COMPANY_WEBSITE = os.getenv('COMPANY_WEBSITE', default='')
COMPANY_NUM = os.getenv('COMPANY_NUM', default='')
COMPANY_ADRESSE = os.getenv('COMPANY_ADRESSE', default='')
COMPANY_MAIL = os.getenv('COMPANY_MAIL', default='')
LOGIN_TITLE = os.getenv('LOGIN_TITLE', default='Welcome')
LOGIN_SUBTITLE = os.getenv('LOGIN_SUBTITLE', default='Sign in to continue')
ADMIN_SITE_HEADER = os.getenv('ADMIN_SITE_HEADER', default='Django Administration')
ADMIN_SITE_TITLE = os.getenv('ADMIN_SITE_TITLE', default='Django Admin Portal')
ADMIN_INDEX_TITLE = os.getenv('ADMIN_INDEX_TITLE', default='Welcome to Django Administration')
CONTACT_EMAILS = os.getenv('CONTACT_EMAILS', default='')
SUPPORT_EMAILS = os.getenv('SUPPORT_EMAILS', default='')
SITE_NAME = os.getenv('SITE_NAME', default='Site')
ASSIGNMENT_DOMAIN = os.getenv('ASSIGNMENT_DOMAIN', '{{ COMPANY_NAME }}.com')
ASSIGNMENT_TOKEN_EXPIRY_HOURS = int(os.getenv('ASSIGNMENT_TOKEN_EXPIRY_HOURS', 24))
COMPANY_SLOGANS=os.getenv('COMPANY_SLOGAN', default='')


